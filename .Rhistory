install.packages("learnr")
install.packages("learnr")
a<-c(1,2,4,8)
x=c(9,3,6,1)
A=matrix(c(12,34,23,12,15,21,63,53,22,17,51,32,37,53,29,21),ncol=4)
View(A)
y=c(141248,193094,262356,183860)
z=c(2,2,2)
A.z
A*z
A*z
d=solve(A)
d
z=d*y
z
A*z=y
z=solve(A)*y
z
z=solve(A,y)
z
for (i in 5) {
print(i*20)
}
for (i in 1:5) {
print(i*20)
}
x[3]
library(readxl)
Matrikse_vir_uitdagings <- read_excel("C:/Users/andre/Downloads/Matrikse vir uitdagings.xlsx",
sheet = "30_10", col_names = FALSE)
View(Matrikse_vir_uitdagings)
Col = matrix(c(0), ncol = 10)
View(Col)
View(Col)
View(Col)
View(Col)
Col = matrix(c(0), ncol=10, nrow = 10)
Z = vector(c(0), length = 10)
Z = c(0,0,0,0,0,0,0,0,0,0)
View(Matrikse_vir_uitdagings)
library(ggplot2)
``{r setup, include=FALSE}
data=read.csv("EM_train.csv",header=T,stringsAsFactors = T)
str(data)
attach(data)
df = data[,c('AgeInMonths','ProfileInMonths','NumPrevOrders','AvgSpend','POSR',
'OPR','Online','Discount')]
sum(df$Discount)
df$Discount
ggplot(df$Discount)
df_2 = data[,c('Discount')]
ggplot(df_2)
summary(df$Discount)
plot(df$Discount)
knitr::opts_chunk$set(echo = TRUE)
data=read.csv("EM_train.csv",header=T,stringsAsFactors = T)
str(data)
attach(data)
df = data[,c('AgeInMonths','ProfileInMonths','NumPrevOrders','AvgSpend','POSR',
'OPR','Online','Discount')]
summary(df$Discount)
plot(df$Discount)
df$Ad_1 = ifelse(Ad_1 == 'Yes',1,0)
df$Ad_2 = ifelse(Ad_2 == 'Yes',1,0)
df$Ad_3 = ifelse(Ad_3 == 'Yes',1,0)
df$Insta = ifelse(SocialMedia %in% 'Instagram',1,0)
df$Twitter = ifelse(SocialMedia %in% 'Twitter',1,0)
df$FB = ifelse(SocialMedia %in% 'Facebook',1,0)
df$Austalia = ifelse(Country %in% 'Australia',1,0)
df$Belgium = ifelse(Country %in% 'Belgium',1,0)
df$Brazil = ifelse(Country %in% 'Brazil',1,0)
df$Egypt = ifelse(Country %in% 'Egypt',1,0)
df$England = ifelse(Country %in% 'England',1,0)
df$Germany = ifelse(Country %in% 'Germany',1,0)
df$Ireland = ifelse(Country %in% 'Ireland',1,0)
df$Italy = ifelse(Country %in% 'Italy',1,0)
df$Japan = ifelse(Country %in% 'Japan',1,0)
df$Kenya = ifelse(Country %in% 'Kenya',1,0)
df$Netherlands = ifelse(Country %in% 'Netherlands',1,0)
df$USA = ifelse(Country %in% "United States",1,0)
df$Sub_Daily = ifelse(Subscribed %in% 'Daily',1,0)
df$Sub_Weekly = ifelse(Subscribed %in% 'Weekly',1,0)
df$Sub_monthly = ifelse(Subscribed %in% 'Monthly' ,1,0)
df$Shipping = ifelse(Shipping == 'Free',1,0)
df$Android= ifelse(Platform %in% "Android",1,0)
df$iOS= ifelse(Platform %in% "iOS",1,0)
df$Express = ifelse(ShippingOption %in% "Express",1,0)
df$Premium = ifelse(ShippingOption %in% "Premium",1,0)
df$Account_Credit = ifelse(Payment %in% "Account Credit",1,0)
df$EFT = ifelse(Payment %in% "EFT",1,0)
df$Paypal = ifelse(Payment %in% "Paypal",1,0)
attach(df)
df$Ad_1XAd_2 = Ad_1*Ad_2
df$Ad_1XAd_3 = Ad_1*Ad_3
df$Ad_2XAd_3 = Ad_2*Ad_3
df$Ad_1XAd_2XAd_3 = Ad_1*Ad_2*Ad_3
df$Ad_2XDaily = Ad_2*Sub_Daily
df$Ad_3XDaily = Ad_3*Sub_Daily
df$Ad_2XWeekly = Ad_2*Sub_Weekly
df$Ad_3XWeekly = Ad_3*Sub_Weekly
df$Ad_2XMonthly = Ad_2*Sub_monthly
df$Ad_3XMonthly = Ad_3*Sub_monthly
df$Sales = Sales
str(df)
set.seed(7)
sample_numbers=sample(1:nrow(df),45000*0.8,F)
train_data=df[sample_numbers,]
val_data=df[-sample_numbers,]
set.seed(8383)
sample_numbers=sample(1:nrow(df),45000*0.8,F)
train_data=df[sample_numbers,]
val_data=df[-sample_numbers,]
forward_stepwise_LM = function(train_data,
validation_data,
response_name){
# This function performs forward stepwise regression for the linear
# model using a validation dataset.
# Input:
# train_data: data.frame
#   The training data - data used to build the model.
# validation_data: data.frame
#   The validation data - data used to test the model.
# response_name: character
#   Character string of the response variable column name.
# Output:
# opt_model: lm
#   Linear model (lm) call of optimal model. Optimal is the model
#   with the lowest validation MSE.
# opt_errors: vector
#   Vector of the training and validation error of the optimal model.
# all_results: data.frame
#   Data frame of the steps, training errors, and validation errors.
# all_models: list
#   List of all models fitted.
####################################################################
# CODE:
# Rename the response variable to "Y"
cols_train = colnames(train_data)
cols_val = colnames(validation_data)
idx_response_train = which(cols_train == response_name)
idx_response_val = which(cols_val == response_name)
colnames(train_data)[idx_response_train] = 'Y'
colnames(validation_data)[idx_response_val] = 'Y'
# Set up formulas for stepwise selection
full_model = lm(Y~., data = train_data)
base_model = lm(Y~1, data = train_data)
# Fit the forward stepwise path
fwd_path = step(base_model, scope=list(lower=formula(base_model),
upper=formula(full_model)),
direction='forward',
k = 0,
trace = 0)
# Extract the column names in the order that they were added
var_path = colnames(fwd_path$model)
col_names = var_path[!(var_path %in% 'Y')]
n_steps = length(col_names)
# Make empty objects for results
models = list()
train_error = numeric()
val_error = numeric()
# Get validation error for each step
YTrain = train_data$Y
YVal = validation_data$Y
for(step in 1:n_steps){
keep_vars = col_names[1:step]
var_names = c(keep_vars, 'Y')
temp_train_df = train_data[, var_names]
temp_val_df = as.data.frame(validation_data[, keep_vars])
colnames(temp_val_df) = keep_vars
mod = lm(Y~., data = temp_train_df)
preds_train = predict(mod)
preds_val = predict(mod, newdata = temp_val_df)
tr_err = mean((preds_train - YTrain)^2)
val_err = mean((preds_val - YVal)^2)
models[[step]] = mod
train_error[step] = tr_err
val_error[step] = val_err
}
# Get optimal model
idx_best = which(val_error == min(val_error))
opt_model = models[[idx_best]]
opt_errors = c('Training' = train_error[idx_best],
'Validation' = val_error[idx_best])
all_results = data.frame('Steps' = 1:n_steps,
'TrainError' = train_error,
'ValidationError' = val_error)
OUTPUT_LIST = list('opt_model' = opt_model,
'opt_errors' = opt_errors,
'all_results' = all_results,
'all_models' = models)
return(OUTPUT_LIST)
}
output = forward_stepwise_LM(train_data,val_data,'Sales')
df_error = output$all_results
attach(df_error)
error_plot = ggplot(df_error,aes(x=Steps,y=ValidationError))+geom_point()+
geom_line()
error_plot
my_opt_model=output$all_models[[13]]
summary(my_opt_model)
formula(my_opt_model)
my_opt_model_full = lm(Sales ~ Ad_3 + Premium + AvgSpend + Discount + Ad_3XDaily + Account_Credit + Ad_1XAd_3 + POSR + Online + Ad_2 + Ad_3XWeekly + Ad_3XMonthly + Ad_2XDaily + Ad_2XWeekly + Ad_2XMonthly,df)
summary(my_opt_model_full)
std.res1 = rstandard(my_opt_model_full)
min(std.res1)
max(std.res1)
outliers1=which(std.res1>3)
outliers1
newdat = df[-outliers1,]
my_opt_model_full1=lm(Sales ~ Ad_3 + Premium + AvgSpend + Discount + Ad_3XDaily + Account_Credit + Ad_1XAd_3 + POSR + Online + Ad_2 + Ad_3XWeekly + Ad_3XMonthly + Ad_2XDaily + Ad_2XWeekly + Ad_2XMonthly,newdat)
summary(my_opt_model_full1)
std.res2 = rstandard(my_opt_model_full1)
predictions1 = predict(my_opt_model_full1,newdat)
df1 = data.frame("std.res"=std.res2,"predicted"=predictions1)
attach(df1)
norm_plot1 = ggplot(df1,aes(x=std.res2,y=..density..))+geom_histogram()
norm_plot1
var_plot1 = ggplot(df1,aes(x=predictions1,y=std.res2))+geom_point()+
geom_abline(slope=0,intercept=0,col='red')
var_plot1
transformed_opt_model=lm(log(Sales) ~ Ad_3 + Premium + AvgSpend + Discount + Ad_3XDaily + Account_Credit + Ad_1XAd_3 + POSR + Online + Ad_2 + Ad_3XWeekly + Ad_3XMonthly + Ad_2XDaily + Ad_2XWeekly + Ad_2XMonthly,newdat)
summary(transformed_opt_model)
transformed_std.res1 = rstandard(transformed_opt_model)
transformed_predictions = predict(transformed_opt_model,newdat)
transformed_df1= data.frame("std.res"=transformed_std.res1,
"predictions"=transformed_predictions)
transformed_normplot1 = ggplot(transformed_df1,aes(x=transformed_std.res1,
y=..density..))+
geom_histogram()
transformed_normplot1
transformed_varplot1 = ggplot(transformed_df1,aes(x=transformed_predictions,
y=transformed_std.res1))+
geom_point()+geom_abline(slope=0,intercept=0,col='red')
transformed_varplot1
library(ggplot2)
library (nortest)
library(ggplot2)
install.package("nortest")
install.package("nortest")
install.packages("nortest")
library(ggplot2)
library(nortest)
lillie.test(transformed_std.res1)
pearson.test(transformed_std.res1)
summary(transformed_opt_model)
df$Ad_1 = ifelse(Ad_1 == 'Yes' && Ad_2 == 'No' && Ad_3 == 'No',1,0)
df$Ad_2 = ifelse(Ad_1 == 'No' && Ad_2 == 'Yes' && Ad_3 == 'No',1,0)
df$Ad_3 = ifelse(Ad_1 == 'No' && Ad_2 == 'No' && Ad_3 == 'Yes',1,0)
df$Ad_1XAd_2 = ifelse(Ad_1 == 'Yes' && Ad_2 == 'Yes' && Ad_3 == 'No',1,0)
df$Ad_1XAd_3 = ifelse(Ad_1 == 'Yes' && Ad_2 == 'No' && Ad_3 == 'Yes',1,0)
df$Ad_2XAd_3 = ifelse(Ad_1 == 'No' && Ad_2 == 'Yes' && Ad_3 == 'Yes',1,0)
df$Ad_1XAd_2XAd_3 =ifelse(Ad_1 == 'Yes' && Ad_2 == 'Yes' && Ad_3 == 'Yes',1,0)
knitr::opts_chunk$set(echo = TRUE)
data=read.csv("EM_train.csv",header=T,stringsAsFactors = T)
str(data)
attach(data)
df = data[,c('AgeInMonths','ProfileInMonths','NumPrevOrders','AvgSpend','POSR',
'OPR','Online','Discount')]
summary(df$Discount)
plot(df$Discount)
df$Ad_1 = ifelse(Ad_1 == 'Yes' && Ad_2 == 'No' && Ad_3 == 'No',1,0)
df$Ad_2 = ifelse(Ad_1 == 'No' && Ad_2 == 'Yes' && Ad_3 == 'No',1,0)
df$Ad_3 = ifelse(Ad_1 == 'No' && Ad_2 == 'No' && Ad_3 == 'Yes',1,0)
df$Ad_1XAd_2 = ifelse(Ad_1 == 'Yes' && Ad_2 == 'Yes' && Ad_3 == 'No',1,0)
df$Ad_1XAd_3 = ifelse(Ad_1 == 'Yes' && Ad_2 == 'No' && Ad_3 == 'Yes',1,0)
df$Ad_2XAd_3 = ifelse(Ad_1 == 'No' && Ad_2 == 'Yes' && Ad_3 == 'Yes',1,0)
df$Ad_1XAd_2XAd_3 =ifelse(Ad_1 == 'Yes' && Ad_2 == 'Yes' && Ad_3 == 'Yes',1,0)
df$Insta = ifelse(SocialMedia %in% 'Instagram',1,0)
df$Twitter = ifelse(SocialMedia %in% 'Twitter',1,0)
df$FB = ifelse(SocialMedia %in% 'Facebook',1,0)
df$Austalia = ifelse(Country %in% 'Australia',1,0)
df$Belgium = ifelse(Country %in% 'Belgium',1,0)
df$Brazil = ifelse(Country %in% 'Brazil',1,0)
df$Egypt = ifelse(Country %in% 'Egypt',1,0)
df$England = ifelse(Country %in% 'England',1,0)
df$Germany = ifelse(Country %in% 'Germany',1,0)
df$Ireland = ifelse(Country %in% 'Ireland',1,0)
df$Italy = ifelse(Country %in% 'Italy',1,0)
df$Japan = ifelse(Country %in% 'Japan',1,0)
df$Kenya = ifelse(Country %in% 'Kenya',1,0)
df$Netherlands = ifelse(Country %in% 'Netherlands',1,0)
df$USA = ifelse(Country %in% "United States",1,0)
df$Sub_Daily = ifelse(Subscribed %in% 'Daily',1,0)
df$Sub_Weekly = ifelse(Subscribed %in% 'Weekly',1,0)
df$Sub_monthly = ifelse(Subscribed %in% 'Monthly' ,1,0)
df$Shipping = ifelse(Shipping == 'Free',1,0)
df$Android= ifelse(Platform %in% "Android",1,0)
df$iOS= ifelse(Platform %in% "iOS",1,0)
df$Express = ifelse(ShippingOption %in% "Express",1,0)
df$Premium = ifelse(ShippingOption %in% "Premium",1,0)
df$Account_Credit = ifelse(Payment %in% "Account Credit",1,0)
df$EFT = ifelse(Payment %in% "EFT",1,0)
df$Paypal = ifelse(Payment %in% "Paypal",1,0)
attach(df)
if (df$Ad_1XAd_2 == 1) {
}
df$Ad_2XDaily = Ad_2*Sub_Daily
df$Ad_3XDaily = Ad_3*Sub_Daily
df$Ad_2XWeekly = Ad_2*Sub_Weekly
df$Ad_3XWeekly = Ad_3*Sub_Weekly
df$Ad_2XMonthly = Ad_2*Sub_monthly
df$Ad_3XMonthly = Ad_3*Sub_monthly
df$Sales = Sales
str(df)
set.seed(8383)
sample_numbers=sample(1:nrow(df),45000*0.8,F)
train_data=df[sample_numbers,]
val_data=df[-sample_numbers,]
forward_stepwise_LM = function(train_data,
validation_data,
response_name){
# This function performs forward stepwise regression for the linear
# model using a validation dataset.
# Input:
# train_data: data.frame
#   The training data - data used to build the model.
# validation_data: data.frame
#   The validation data - data used to test the model.
# response_name: character
#   Character string of the response variable column name.
# Output:
# opt_model: lm
#   Linear model (lm) call of optimal model. Optimal is the model
#   with the lowest validation MSE.
# opt_errors: vector
#   Vector of the training and validation error of the optimal model.
# all_results: data.frame
#   Data frame of the steps, training errors, and validation errors.
# all_models: list
#   List of all models fitted.
####################################################################
# CODE:
# Rename the response variable to "Y"
cols_train = colnames(train_data)
cols_val = colnames(validation_data)
idx_response_train = which(cols_train == response_name)
idx_response_val = which(cols_val == response_name)
colnames(train_data)[idx_response_train] = 'Y'
colnames(validation_data)[idx_response_val] = 'Y'
# Set up formulas for stepwise selection
full_model = lm(Y~., data = train_data)
base_model = lm(Y~1, data = train_data)
# Fit the forward stepwise path
fwd_path = step(base_model, scope=list(lower=formula(base_model),
upper=formula(full_model)),
direction='forward',
k = 0,
trace = 0)
# Extract the column names in the order that they were added
var_path = colnames(fwd_path$model)
col_names = var_path[!(var_path %in% 'Y')]
n_steps = length(col_names)
# Make empty objects for results
models = list()
train_error = numeric()
val_error = numeric()
# Get validation error for each step
YTrain = train_data$Y
YVal = validation_data$Y
for(step in 1:n_steps){
keep_vars = col_names[1:step]
var_names = c(keep_vars, 'Y')
temp_train_df = train_data[, var_names]
temp_val_df = as.data.frame(validation_data[, keep_vars])
colnames(temp_val_df) = keep_vars
mod = lm(Y~., data = temp_train_df)
preds_train = predict(mod)
preds_val = predict(mod, newdata = temp_val_df)
tr_err = mean((preds_train - YTrain)^2)
val_err = mean((preds_val - YVal)^2)
models[[step]] = mod
train_error[step] = tr_err
val_error[step] = val_err
}
# Get optimal model
idx_best = which(val_error == min(val_error))
opt_model = models[[idx_best]]
opt_errors = c('Training' = train_error[idx_best],
'Validation' = val_error[idx_best])
all_results = data.frame('Steps' = 1:n_steps,
'TrainError' = train_error,
'ValidationError' = val_error)
OUTPUT_LIST = list('opt_model' = opt_model,
'opt_errors' = opt_errors,
'all_results' = all_results,
'all_models' = models)
return(OUTPUT_LIST)
}
output = forward_stepwise_LM(train_data,val_data,'Sales')
df_error = output$all_results
attach(df_error)
error_plot = ggplot(df_error,aes(x=Steps,y=ValidationError))+geom_point()+
geom_line()
error_plot
my_opt_model=output$all_models[[13]]
summary(my_opt_model)
formula(my_opt_model)
my_opt_model_full = lm(Sales ~ Ad_3 + Premium + AvgSpend + Discount + Ad_3XDaily + Account_Credit + Ad_1XAd_3 + POSR + Online + Ad_2 + Ad_3XWeekly + Ad_3XMonthly + Ad_2XDaily + Ad_2XWeekly + Ad_2XMonthly,df)
summary(my_opt_model_full)
std.res1 = rstandard(my_opt_model_full)
min(std.res1)
max(std.res1)
outliers1=which(std.res1>3)
outliers1
newdat = df[-outliers1,]
install.packages("devtools")
library(devtools)
x = 3
fmxdat::make_project()
fmxdat::make_project()
