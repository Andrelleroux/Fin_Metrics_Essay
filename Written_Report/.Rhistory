theme_minimal() +
theme(legend.position = "bottom")
Indices_of_Interest <- c(
"J203", "J212", "J310", "J311", "J253", "ALBITR"
)
LCL_Index_dat <- LCL_indice_init %>%
filter(Tickers %in% Indices_of_Interest) %>%
select(-Name)
data = LCL_Index_dat
source("code/impute_missing_returns.r")
Sector_Data <- data %>% spread(key = Tickers, value = Returns) %>%
impute_missing_returns(., impute_returns_method = "Drawn_Distribution_Own")
sigma <- cov(Sector_Data[-1])
mu <- colMeans(Sector_Data[-1])
rpp_vanilla <- riskParityPortfolio(sigma)
rpp_naive <- riskParityPortfolio(sigma, formulation = "diag")
rpp_mu <- riskParityPortfolio(sigma, formulation = "rc-over-b-double-index",
mu = mu, lmd_mu = 1e-3)
w_all <- cbind("EWP"           = rep(1/nrow(sigma), nrow(sigma)),
"RPP (naive)"   = rpp_naive$w,
"RPP (vanilla)" = rpp_vanilla$w,
"RPP + mu"      = rpp_mu$w)
barplotPortfolioRisk(w_all, sigma) +
theme_minimal() +
theme(legend.position = "bottom")
lmd_sweep <- 10^seq(-5, 2, .25)
mean_return <- c()
risk_concentration <- c()
for (lmd_mu in lmd_sweep) {
rpp <- riskParityPortfolio(sigma, mu = mu, lmd_mu = lmd_mu,
formulation = "rc-over-sd vs b-times-sd")
mean_return <- c(mean_return, rpp$mean_return)
risk_concentration <- c(risk_concentration, rpp$risk_concentration)
}
ggplot(data.frame(risk_concentration, mean_return),
aes(x = risk_concentration, y = mean_return)) +
geom_line() + geom_point() +
labs(title = "Expected Return vs Risk Concentration",
x = "Risk Concentration", y = "Expected Return") +
theme_minimal()
risk_parity <- function(dataset, current_date) {
filter_dataset <- dataset %>% filter(date >= current_date - years(3) & date <= current_date)
sigma <- cov(filter_dataset[-1])
mu <- colMeans(filter_dataset[-1])
risk_parity_mod <- riskParityPortfolio(sigma, formulation = "rc-over-b-double-index",
mu = mu, lmd_mu = 0.00023)
return(risk_parity_mod$w)
}
rebal = Rebal_Days
rebalance_dates <- rebal %>% filter(Date_Type == "Reb Trade Day") %>%
filter(date >= as.Date("1999-11-30") & date <= as.Date("2024-12-31")) %>% select(date)
weights_df_RPP <- rebalance_dates %>%
rowwise() %>%
mutate(weights = list(risk_parity(Sector_Data, date))) %>%
unnest_wider(weights)
plot_3 <- weights_df_RPP %>% tbl_xts() %>%
chart.StackedBar(main = "Optimal Weights of Portfolio",
ylab = "Weight (%)",
xlab = "Date",
col = rep(brewer.pal(12, "Paired"), length.out = 37),
cex.legend = 0.5)
rebalance_dates <- rebal %>% filter(Date_Type == "Reb Trade Day") %>%
filter(date >= as.Date("2004-11-30") & date <= as.Date("2024-12-31")) %>% select(date)
weights_df_RPP <- rebalance_dates %>%
rowwise() %>%
mutate(weights = list(risk_parity(Sector_Data, date))) %>%
unnest_wider(weights)
plot_3 <- weights_df_RPP %>% tbl_xts() %>%
chart.StackedBar(main = "Optimal Weights of Portfolio",
ylab = "Weight (%)",
xlab = "Date",
col = rep(brewer.pal(12, "Paired"), length.out = 37),
cex.legend = 0.5)
View(weights_df_RPP)
RPP_RetPort <-
rmsfuns::Safe_Return.portfolio(Returns_Rpp,
weights = Weights_RPP, lag_weights = TRUE,
verbose = TRUE, contribution = TRUE,
value = 1000, geometric = TRUE)
Weights_RPP <- weights_df_RPP %>% tbl_xts()
Returns_Rpp <- Sector_Data %>% tbl_xts()
RPP_RetPort <-
rmsfuns::Safe_Return.portfolio(Returns_Rpp,
weights = Weights_RPP, lag_weights = TRUE,
verbose = TRUE, contribution = TRUE,
value = 1000, geometric = TRUE)
Cum_Plot_Data <- RPP_RetPort$returns %>% xts_tbl() %>%
mutate(cumreturn_Rpp = (cumprod(1 + RPP_Returns))) %>%
# Start at 1
mutate(cumreturn_Rpp = cumreturn_Rpp / first(cumreturn_Rpp)) %>%
ggplot() +
geom_line(aes(date, cumreturn_Rpp, color = "Risk Parity")) +
labs(
x = "Date",
y = "Cumulative Returns",
color = "Portfolios"
) +
theme_minimal() +
theme(
legend.position = "bottom"
)
Cum_Plot_Data <- RPP_RetPort$returns %>% xts_tbl()
View(Cum_Plot_Data)
Cum_Plot_Data <- RPP_RetPort$returns %>% xts_tbl() %>%
mutate(cumreturn_Rpp = (cumprod(1 + portfolio.returns))) %>%
# Start at 1
mutate(cumreturn_Rpp = cumreturn_Rpp / first(cumreturn_Rpp)) %>%
ggplot() +
geom_line(aes(date, cumreturn_Rpp, color = "Risk Parity")) +
labs(
x = "Date",
y = "Cumulative Returns",
color = "Portfolios"
) +
theme_minimal() +
theme(
legend.position = "bottom"
)
Cum_Plot_Data
RPP_RetPort$BOP.Weight %>% .[endpoints(.,'months')] %>% chart.StackedBar(main = "Optimal Weights of Portfolio",
ylab = "Weight (%)",
xlab = "Date",
col = rep(brewer.pal(12, "Paired"), length.out = 37),
cex.legend = 0.5)
View(RPP_RetPort)
Sector_plot <- Sector_Data %>%
filter(date >= as.Date("2004-12-01" & date <= as.Date("2024-12-31"))) %>%
mutate(cumreturn_ALSI = (cumprod(1 + J203))) %>%
mutate(cumreturn_ALSI = cumreturn_ALSI / first(cumreturn_ALSI)) %>%
mutate(cumreturn_Bonds = (cumprod(1 + ALBITR))) %>%
mutate(cumreturn_Bonds = cumreturn_Bonds / first(cumreturn_Bonds)) %>%
select(date, cumreturn_Bonds, cumreturn_ALSI)
Sector_plot <- Sector_Data %>%
filter(date >= as.Date("2004-12-01") & date <= as.Date("2024-12-31")) %>%
mutate(cumreturn_ALSI = (cumprod(1 + J203))) %>%
mutate(cumreturn_ALSI = cumreturn_ALSI / first(cumreturn_ALSI)) %>%
mutate(cumreturn_Bonds = (cumprod(1 + ALBITR))) %>%
mutate(cumreturn_Bonds = cumreturn_Bonds / first(cumreturn_Bonds)) %>%
select(date, cumreturn_Bonds, cumreturn_ALSI)
plot_3 <- RPP_RetPort$returns %>% xts_tbl() %>%
mutate(cumreturn_Rpp = (cumprod(1 + portfolio.returns))) %>%
# Start at 1
mutate(cumreturn_Rpp = cumreturn_Rpp / first(cumreturn_Rpp)) %>%
ggplot() +
geom_line(aes(date, cumreturn_Rpp, color = "Risk Parity Portfolio")) +
geom_line(data = Sector_plot, aes(date, cumreturn_ALSI, color = "All Share Index"))+
geom_line(data = Sector_plot, aes(date, cumreturn_Bonds, color = "ALBITR Bonds Index"))
+
labs(
x = "Date",
y = "Cumulative Returns",
color = "Portfolios"
) +
theme_minimal() +
theme(
legend.position = "bottom"
)
plot_3 <- RPP_RetPort$returns %>% xts_tbl() %>%
mutate(cumreturn_Rpp = (cumprod(1 + portfolio.returns))) %>%
# Start at 1
mutate(cumreturn_Rpp = cumreturn_Rpp / first(cumreturn_Rpp)) %>%
ggplot() +
geom_line(aes(date, cumreturn_Rpp, color = "Risk Parity Portfolio")) +
geom_line(data = Sector_plot, aes(date, cumreturn_ALSI, color = "All Share Index")) +
geom_line(data = Sector_plot, aes(date, cumreturn_Bonds, color = "ALBITR Bonds Index")) +
labs(
x = "Date",
y = "Cumulative Returns",
color = "Portfolios"
) +
theme_minimal() +
theme(
legend.position = "bottom"
)
plot_3
source("code/max_sharpe_ratio.r")
weights_df_Tangent <- rebalance_dates %>%
rowwise() %>%
mutate(weights = list(max_sharpe_ratio(Sector_Data, date))) %>%
unnest_wider(weights)
View(weights_df_Tangent)
Weigths_Tan <- weights_df_Tangent %>% tbl_xts()
Tan_RetPort <-
rmsfuns::Safe_Return.portfolio(Returns_Rpp,
weights = Weights_Tan, lag_weights = TRUE,
verbose = TRUE, contribution = TRUE,
value = 1000, geometric = TRUE)
weights_df_Tangent <- rebalance_dates %>%
rowwise() %>%
mutate(weights = list(max_sharpe_ratio(Sector_Data, date))) %>%
unnest_wider(weights)
Weights_RPP <- weights_df_RPP %>% tbl_xts()
Weigths_Tan <- weights_df_Tangent %>% tbl_xts()
Returns_Rpp <- Sector_Data %>% tbl_xts()
remove(Weights_Tan)
Tan_RetPort <-
rmsfuns::Safe_Return.portfolio(Returns_Rpp,
weights = Weights_Tan, lag_weights = TRUE,
verbose = TRUE, contribution = TRUE,
value = 1000, geometric = TRUE)
Weights_RPP <- weights_df_RPP %>% tbl_xts()
Weights_Tan <- weights_df_Tangent %>% tbl_xts()
Returns_Rpp <- Sector_Data %>% tbl_xts()
Tan_RetPort <-
rmsfuns::Safe_Return.portfolio(Returns_Rpp,
weights = Weights_Tan, lag_weights = TRUE,
verbose = TRUE, contribution = TRUE,
value = 1000, geometric = TRUE)
plot_3 <- RPP_RetPort$returns %>% xts_tbl() %>%
rename(RPP_Returns = portfolio.returns) %>%
left_join(., Tan_RetPort$returns %>% xts_tbl(), by = "date") %>%
rename(Tangency_Returns = portfolio.returns) %>%
mutate(cumreturn_Rpp = (cumprod(1 + RPP_Returns))) %>%
# Start at 1
mutate(cumreturn_Rpp = cumreturn_Rpp / first(cumreturn_Rpp)) %>%
mutate(cumreturn_Tan = (cumprod(1 + Tangency_Returns))) %>%
# Start at 1
mutate(cumreturn_Tan = cumreturn_Tan / first(cumreturn_Tan))
View(plot_3)
plot_3 <- RPP_RetPort$returns %>% xts_tbl() %>%
rename(RPP_Returns = portfolio.returns) %>%
left_join(., Tan_RetPort$returns %>% xts_tbl(), by = "date") %>%
rename(Tangency_Returns = portfolio.returns) %>%
mutate(cumreturn_Rpp = (cumprod(1 + RPP_Returns))) %>%
# Start at 1
mutate(cumreturn_Rpp = cumreturn_Rpp / first(cumreturn_Rpp)) %>%
mutate(cumreturn_Tan = (cumprod(1 + Tangency_Returns))) %>%
# Start at 1
mutate(cumreturn_Tan = cumreturn_Tan / first(cumreturn_Tan)) %>%
ggplot() +
geom_line(aes(date, cumreturn_Rpp, color = "Risk Parity Portfolio")) +
geom_line(data = Sector_plot, aes(date, cumreturn_ALSI, color = "All Share Index")) +
geom_line(data = Sector_plot, aes(date, cumreturn_Bonds, color = "ALBITR Bonds Index")) +
geom_line(aes(date, cumreturn_Tan, color = "Maximum Sharpe Ratio")) +
labs(
x = "Date",
y = "Cumulative Returns",
color = "Portfolios"
) +
theme_minimal() +
theme(
legend.position = "bottom"
)
plot_3
plot_5 <- Tan_RetPort$BOP.Weight %>% .[endpoints(.,'months')] %>% chart.StackedBar(main = "Optimal Weights of Portfolio",
ylab = "Weight (%)",
xlab = "Date",
col = rep(brewer.pal(12, "Paired"), length.out = 37),
cex.legend = 0.5)
plot_3 <- RPP_RetPort$returns %>% xts_tbl() %>%
rename(RPP_Returns = portfolio.returns) %>%
left_join(., Tan_RetPort$returns %>% xts_tbl(), by = "date") %>%
rename(Tangency_Returns = portfolio.returns) %>%
mutate(cumreturn_Rpp = (cumprod(1 + RPP_Returns))) %>%
# Start at 1
mutate(cumreturn_Rpp = cumreturn_Rpp / first(cumreturn_Rpp)) %>%
mutate(cumreturn_Tan = (cumprod(1 + Tangency_Returns))) %>%
# Start at 1
mutate(cumreturn_Tan = cumreturn_Tan / first(cumreturn_Tan)) %>%
ggplot() +
geom_line(aes(date, cumreturn_Rpp, color = "Risk Parity Portfolio")) +
geom_line(data = Sector_plot, aes(date, cumreturn_ALSI, color = "All Share Index")) +
geom_line(data = Sector_plot, aes(date, cumreturn_Bonds, color = "ALBITR Bonds Index")) +
geom_line(aes(date, cumreturn_Tan, color = "Maximum Sharpe Ratio")) +
labs(
x = "Date",
y = "Cumulative Returns",
color = "Portfolios"
) +
theme_minimal() +
theme(
legend.position = "bottom"
)
plot_3
weights_df_Equal <- rebalance_dates %>%
rowwise() %>%
mutate(weights = list(rep(1 / ncol(Sector_Data[-1]), ncol(Sector_Data[-1])))) %>%
unnest_wider(weights)
weights_df_Equal <- rebalance_dates %>%
rowwise() %>%
mutate(weights = list(rep(1 / ncol(Sector_Data[-1]), ncol(Sector_Data[-1]))))
View(weights_df_Equal)
weights_df_Equal <- rebalance_dates %>%
rowwise() %>%
mutate(weights = list(setNames(rep(1 / (ncol(Sector_Data) - 1), ncol(Sector_Data) - 1),
colnames(Sector_Data)[-1]))) %>%
unnest_wider(weights, names_sep = "_")
Weights_Equal <- weights_df_Equal %>% tbl_xts()
Equal_RetPort <- rmsfuns::Safe_Return.portfolio(Returns_Rpp,
weights = Weights_Equal, lag_weights = TRUE,
verbose = TRUE, contribution = TRUE,
value = 1000, geometric = TRUE)
View(Weights_Equal)
View(Weights_RPP)
weights_df_Equal <- rebalance_dates %>%
rowwise() %>%
mutate(weights = list(setNames(rep(1 / (ncol(Sector_Data) - 1), ncol(Sector_Data) - 1),
colnames(Sector_Data)[-1]))) %>%
unnest_wider(weights)
View(weights_df_Equal)
Weights_RPP <- weights_df_RPP %>% tbl_xts()
Weights_Tan <- weights_df_Tangent %>% tbl_xts()
Weights_Equal <- weights_df_Equal %>% tbl_xts()
Returns_Rpp <- Sector_Data %>% tbl_xts()
Equal_RetPort <- rmsfuns::Safe_Return.portfolio(Returns_Rpp,
weights = Weights_Equal, lag_weights = TRUE,
verbose = TRUE, contribution = TRUE,
value = 1000, geometric = TRUE)
plot_3 <- RPP_RetPort$returns %>% xts_tbl() %>%
rename(RPP_Returns = portfolio.returns) %>%
left_join(., Tan_RetPort$returns %>% xts_tbl(), by = "date") %>%
rename(Tangency_Returns = portfolio.returns) %>%
left_join(., Equal_RetPort$returns %>% xts_tbl(), by = "date") %>%
rename(Equal_Returns = portfolio.returns) %>%
mutate(cumreturn_Rpp = (cumprod(1 + RPP_Returns))) %>%
# Start at 1
mutate(cumreturn_Rpp = cumreturn_Rpp / first(cumreturn_Rpp)) %>%
mutate(cumreturn_Tan = (cumprod(1 + Tangency_Returns))) %>%
# Start at 1
mutate(cumreturn_Tan = cumreturn_Tan / first(cumreturn_Tan)) %>%
mutate(cumreturn_Equal = (cumprod(1 + Equal_Returns))) %>%
# Start at 1
mutate(cumreturn_Equal = cumreturn_Equal / first(cumreturn_Equal)) %>%
ggplot() +
geom_line(aes(date, cumreturn_Rpp, color = "Risk Parity Portfolio")) +
geom_line(data = Sector_plot, aes(date, cumreturn_ALSI, color = "All Share Index")) +
geom_line(data = Sector_plot, aes(date, cumreturn_Bonds, color = "ALBITR Bonds Index")) +
geom_line(aes(date, cumreturn_Tan, color = "Maximum Sharpe Ratio Portfolio")) +
geom_line(aes(date, cumreturn_Equal, color = "Equal Weighting Portfolio")) +
labs(
x = "Date",
y = "Cumulative Returns",
color = "Portfolios"
) +
theme_minimal() +
theme(
legend.position = "bottom"
)
plot_3
plot_6 <- Equal_RetPort$BOP.Weight %>% .[endpoints(.,'months')] %>% chart.StackedBar(main = "Optimal Weights of Portfolio",
ylab = "Weight (%)",
xlab = "Date",
col = rep(brewer.pal(12, "Paired"), length.out = 37),
cex.legend = 0.5)
plot_1 <- barplotPortfolioRisk(w_all, sigma) +
theme_minimal() +
theme(legend.position = "bottom")
plot_1
?data.frame
All_Ret_Data <- data.frame(date = Sector_Data$date,
Risk_Parity = RPP_RetPort$returns,
Equal_Weighting = Equal_RetPort$returns,
Max_Sharpe = Tan_RetPort$returns)
View(Tan_RetPort)
All_Ret_Data <- data.frame(date = Sector_Data %>% filter(date >= as.Date(2004-12-01)) %>% select(date),
Risk_Parity = RPP_RetPort$returns,
Equal_Weighting = Equal_RetPort$returns,
Max_Sharpe = Tan_RetPort$returns)
All_Ret_Data <- data.frame(date = Sector_plot$date,
Risk_Parity = RPP_RetPort$returns,
Equal_Weighting = Equal_RetPort$returns,
Max_Sharpe = Tan_RetPort$returns)
View(All_Ret_Data)
All_Ret_Data <- data.frame(date = Sector_plot$date,
Risk_Parity = RPP_RetPort$returns,
Equal_Weighting = Equal_RetPort$returns,
Max_Sharpe = Tan_RetPort$returns) %>%
rename(Risk_Parity = portfolio.returns, Equal_Weighting = portfolio.returns1,
Max_Sharpe = portfolio.returns2)
All_Ret_Data <- data.frame(date = Sector_plot$date,
Risk_Parity = RPP_RetPort$returns,
Equal_Weighting = Equal_RetPort$returns,
Max_Sharpe = Tan_RetPort$returns) %>%
rename(Risk_Parity = portfolio.returns, Equal_Weighting = portfolio.returns.1,
Max_Sharpe = portfolio.returns.2)
All_Ret_Data <- data.frame(date = Sector_plot$date,
Risk_Parity = RPP_RetPort$returns,
Equal_Weighting = Equal_RetPort$returns,
Max_Sharpe = Tan_RetPort$returns) %>%
rename(Risk_Parity = portfolio.returns, Equal_Weighting = portfolio.returns.1,
Max_Sharpe = portfolio.returns.2)
Return_List <- list(plot_1, plot_2, plot_3, plot_4, plot_5, plot_6, All_Ret_Data)
plot_2 <- ggplot(data.frame(risk_concentration, mean_return),
aes(x = risk_concentration, y = mean_return)) +
geom_line() + geom_point() +
labs(title = "Expected Return vs Risk Concentration",
x = "Risk Concentration", y = "Expected Return") +
theme_minimal()
Return_List <- list(plot_1, plot_2, plot_3, plot_4, plot_5, plot_6, All_Ret_Data)
plot_4 <- RPP_RetPort$BOP.Weight %>% .[endpoints(.,'months')] %>% chart.StackedBar(main = "Optimal Weights of Portfolio",
ylab = "Weight (%)",
xlab = "Date",
col = rep(brewer.pal(12, "Paired"), length.out = 37),
cex.legend = 0.5)
Return_List <- list(plot_1, plot_2, plot_3, plot_4, plot_5, plot_6, All_Ret_Data)
portfolio_returns <- All_Ret_Data %>% tbl_xts()
data = All_Ret_Data
portfolio_returns <- data %>% tbl_xts()
View(portfolio_returns)
performance_table <- data.frame(
Annualized_Return = apply.portfolio(portfolio_returns, Return.annualized),
Annualized_Risk = apply.portfolio(portfolio_returns, StdDev.annualized),
Sharpe_Ratio = apply.portfolio(portfolio_returns, SharpeRatio.annualized),
Max_Drawdown = apply.portfolio(portfolio_returns, maxDrawdown)
)
library(PerformanceAnalytics)
performance_table <- data.frame(
Annualized_Return = apply.portfolio(portfolio_returns, Return.annualized),
Annualized_Risk = apply.portfolio(portfolio_returns, StdDev.annualized),
Sharpe_Ratio = apply.portfolio(portfolio_returns, SharpeRatio.annualized),
Max_Drawdown = apply.portfolio(portfolio_returns, maxDrawdown)
)
performance_table <- data.frame(
Portfolio = colnames(portfolio_returns),
Annualized_Return = apply(portfolio_returns, 2, Return.annualized),
Annualized_Risk = apply(portfolio_returns, 2, StdDev.annualized),
Sharpe_Ratio = apply(portfolio_returns, 2, SharpeRatio.annualized, Rf = 0.02 / 12), # Example risk-free rate
Max_Drawdown = apply(portfolio_returns, 2, maxDrawdown)
)
View(performance_table)
View(performance_table)
performance_table <- data.frame(
Portfolio = colnames(portfolio_returns),
Annualized_Return = apply(portfolio_returns, 2, Return.annualized),
Annualized_Risk = apply(portfolio_returns, 2, StdDev.annualized),
Sharpe_Ratio = apply(portfolio_returns, 2, SharpeRatio.annualized, Rf = 0.02 / 12), # Example risk-free rate
Max_Drawdown = apply(portfolio_returns, 2, maxDrawdown),
Expected_Shortfall = apply(portfolio_returns, 2, ES, p = 0.95) # 95% Expected Shortfall
)
performance_table <- data.frame(
Portfolio = colnames(portfolio_returns),
Annualized_Return = apply(portfolio_returns, 2, Return.annualized),
Annualized_Risk = apply(portfolio_returns, 2, StdDev.annualized),
Sharpe_Ratio = apply(portfolio_returns, 2, SharpeRatio.annualized, Rf = 0.02 / 12), # Example risk-free rate
Max_Drawdown = apply(portfolio_returns, 2, maxDrawdown),
Expected_Shortfall = apply(portfolio_returns, 2, ES, p = 0.95) # 95% Expected Shortfall
)
performance_table
chart.Drawdown(portfolio_returns, main = "Drawdown Analysis", legend.loc = "topright")
chart.Drawdown(portfolio_returns, main = "Drawdown Analysis", legend.loc = "botright")
chart.Drawdown(portfolio_returns, main = "Drawdown Analysis", legend.loc = "bottomright")
plot_4
View(plot_4)
plot_4
plot_4 <- RPP_RetPort$BOP.Weight %>% .[endpoints(.,'months')] %>% chart.StackedBar(main = "Optimal Weights of Portfolio",
ylab = "Weight (%)",
xlab = "Date",
col = rep(brewer.pal(12, "Paired"), length.out = 37),
cex.legend = 0.5)
plot_5 <- Tan_RetPort$BOP.Weight %>% .[endpoints(.,'months')] %>% chart.StackedBar(main = "Optimal Weights of Portfolio",
ylab = "Weight (%)",
xlab = "Date",
col = rep(brewer.pal(12, "Paired"), length.out = 37),
cex.legend = 0.5)
plot_6 <- Equal_RetPort$BOP.Weight %>% .[endpoints(.,'months')] %>% chart.StackedBar(main = "Optimal Weights of Portfolio",
ylab = "Weight (%)",
xlab = "Date",
col = rep(brewer.pal(12, "Paired"), length.out = 37),
cex.legend = 0.5)
chart.RiskReturnScatter(portfolio_returns, main = "Risk vs. Return")
chart.RollingPerformance(portfolio_returns, width = 12, FUN = SharpeRatio.annualized,
main = "Rolling Sharpe Ratio", legend.loc = "topright")
chart.RollingPerformance(
portfolio_returns,
width = 12,
FUN = StdDev.annualized, # Use StdDev.annualized for rolling standard deviation
main = "Rolling Standard Deviation (Annualized)",
legend.loc = "topright"
)
chart.RollingPerformance(
portfolio_returns,
width = 12,
FUN = StdDev.annualized, # Use StdDev.annualized for rolling standard deviation
main = "Rolling Standard Deviation (Annualized)",
legend.loc = "topleft"
)
Analysis_Table <- performance_table %>%
kable("latex", booktabs = TRUE, align = "c",
caption = "Performance Metrics of Portfolios") %>%
kable_styling(latex_options = c("striped", "hold_position"),
position = "center", full_width = FALSE) %>%
row_spec(0, bold = TRUE, color = "white", background = "#4CAF50") %>% # Header styling
column_spec(1, bold = TRUE)
library(knitr)
library(kableExtra)
Analysis_Table <- performance_table %>%
kable("latex", booktabs = TRUE, align = "c",
caption = "Performance Metrics of Portfolios") %>%
kable_styling(latex_options = c("striped", "hold_position"),
position = "center", full_width = FALSE) %>%
row_spec(0, bold = TRUE, color = "white", background = "#4CAF50") %>% # Header styling
column_spec(1, bold = TRUE)
Analysis_Table
View(Analysis_Table)
List_Return <- list(Analysis_1, Analysis_2, Analysis_3, Analysis_Table)
Analysis_1 <- chart.Drawdown(portfolio_returns, main = "Drawdown Analysis", legend.loc = "bottomright")
Analysis_2 <- chart.RiskReturnScatter(portfolio_returns, main = "Risk vs. Return")
Analysis_3 <- chart.RollingPerformance(
portfolio_returns,
width = 12,
FUN = StdDev.annualized, # Use StdDev.annualized for rolling standard deviation
main = "Rolling Standard Deviation (Annualized)",
legend.loc = "topleft"
)
Analysis_Table <- performance_table %>%
kable("latex", booktabs = TRUE, align = "c",
caption = "Performance Metrics of Portfolios") %>%
kable_styling(latex_options = c("striped", "hold_position"),
position = "center", full_width = FALSE) %>%
row_spec(0, bold = TRUE, color = "white", background = "#4CAF50") %>% # Header styling
column_spec(1, bold = TRUE)
List_Return <- list(Analysis_1, Analysis_2, Analysis_3, Analysis_Table)
